import logging
import asyncio
from fastapi import FastAPI, Request, Query
from fastapi.templating import Jinja2Templates
from src.moralis_client import search_tokens
from src.moralis_agent import MoralisAgent  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∞–≥–µ–Ω—Ç

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="Crypto Token API", description="API for searching crypto tokens")
templates = Jinja2Templates(directory="templates")

@app.get("/")
async def home(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–æ–∏—Å–∫–æ–≤–æ–π —Ñ–æ—Ä–º–æ–π."""
    return templates.TemplateResponse("tokens.html", {
        "request": request,
        "query": None,
        "results": [],
        "not_found": False,
        "error_message": None,
    })

@app.get("/search")
async def search(request: Request, query: str = Query(default="")):
    """–ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–æ–≤ + –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ MoralisAgent (–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–æ–≤)."""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {query}")

        if len(query.strip()) < 2:
            return templates.TemplateResponse("tokens.html", {
                "request": request,
                "query": query,
                "results": [],
                "not_found": False,
                "error_message": "üö® –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.",
            })

        token_data = await search_tokens(query)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–æ–≤: {token_data}")

        if not token_data or "result" not in token_data:
            return templates.TemplateResponse("tokens.html", {
                "request": request,
                "query": query,
                "results": [],
                "not_found": True,
                "error_message": None,
            })

        results = token_data.get("result", [])

        # –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        agent_tasks = [MoralisAgent(token).analyze() for token in results]
        analyses = await asyncio.gather(*agent_tasks, return_exceptions=True)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for token, analysis in zip(results, analyses):
            token["analysis"] = analysis if isinstance(analysis, str) else "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞, –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."

        return templates.TemplateResponse("tokens.html", {
            "request": request,
            "query": query,
            "results": results,
            "not_found": False,
            "error_message": None,
        })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API: {e}", exc_info=True)
        return templates.TemplateResponse("tokens.html", {
            "request": request,
            "query": query,
            "results": [],
            "not_found": False,
            "error_message": f"üö® –û—à–∏–±–∫–∞ API: {str(e)}",
        })
